name: "Sentry self-hosted end-to-end tests"
inputs:
  project_name:
    required: true
    description: "e.g. snuba, sentry, relay, self-hosted"
  image_url:
    required: true
    description: "The URL to the built relay, snuba, sentry image to test against."
  docker_repo:
    required: false
    description: "Docker target repo for publishing, e.g. getsentry/snuba"
  docker_password:
    required: false
    default: ""
    description: "The sentrybuilder password to log in to docker to push the successful image"

runs:
  using: "composite"
  steps:
    - name: Check we are in a checkout for the correct repo
      if: ${{ inputs.project_name != 'self-hosted' }}
      shell: bash
      run: git status
    - name: Checkout self-hosted if needed by another project
      if: ${{ inputs.project_name != 'self-hosted' }}
      uses: actions/checkout@v3
      with:
        repository: "getsentry/self-hosted"
        path: self-hosted
    - name: Pull the test image
      if: ${{ inputs.project_name != 'self-hosted' }}
      id: image_pull
      env:
        IMAGE_URL: ${{ inputs.image_url }}
      shell: bash
      run: |
        echo "We poll for the Docker image that the GCB/GHA build produces until it succeeds or this job times out."
        echo "Polling for $IMAGE_URL"
        until docker pull "$IMAGE_URL" 2>/dev/null; do
           sleep 10
        done
    - name: Configure to use the test image
      shell: bash
      run: |
        cd self-hosted
        echo -n "${{ inputs.project_name }}_IMAGE=" | tr '[:lower:]' '[:upper:]' > .env.custom
        echo "${{ inputs.image_url }}" >> .env.custom
    - name: Run the installer
      run: |
        cd self-hosted
        ./install.sh --no-report-self-hosted-issues
      shell: bash
    - name: Run tests
      shell: bash
      run: |
        set +e
        cd self-hosted
        ./test.sh
        test_returns=$?
        set -e
        if [[ $test_return -ne 0 ]]; then
          echo "Test failed.";
          docker-compose ps;
          docker-compose logs;
          exit $test_return;
        fi
    - name: Get short SHA for docker tag
      if: ${{ inputs.project_name != 'self-hosted' }}
      id: short_sha
      shell: bash
      run: |
        SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")
        if [[ -z "$SHORT_SHA" ]]; then
          echo "Short SHA empty? Re-running rev-parse."
          git rev-parse --short "$GITHUB_SHA"
        else
          echo "sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        fi
    - name: Push built docker image
      if: ${{ (github.ref_name == 'master' || github.ref_name == 'main') && inputs.project_name != 'self-hosted' }}
      shell: bash
      env:
        SHORT_SHA: ${{ steps.short_sha.outputs.sha }}
        IMAGE_URL: ${{ inputs.image_url }}
        DOCKER_REPO: ${{ inputs.docker_repo }}
      run: |
        # only login if the password is set
        if [[ "${{ inputs.docker_password }}" ]]; then echo "${{ inputs.docker_password }}" | docker login --username=sentrybuilder --password-stdin; fi
        # We push 3 tags to Dockerhub:
        # first, the full sha of the commit
        docker tag ${IMAGE_URL} ${DOCKER_REPO}:${GITHUB_SHA}
        docker push ${DOCKER_REPO}:${GITHUB_SHA}
        # second, the short sha of the commit
        docker tag ${IMAGE_URL} ${DOCKER_REPO}:${SHORT_SHA}
        docker push ${DOCKER_REPO}:${SHORT_SHA}
        # finally, nightly
        docker tag ${IMAGE_URL} ${DOCKER_REPO}:nightly
        docker push ${DOCKER_REPO}:nightly
